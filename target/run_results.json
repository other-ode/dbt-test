{"results": [{"node": {"raw_sql": "select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from `dbt-tutorial`.jaffle_shop.customers", "compiled": true, "database": "cool-evening-299014", "schema": "dbt_david", "fqn": ["jaffle_shop", "stg_customers"], "unique_id": "model.jaffle_shop.stg_customers", "package_name": "jaffle_shop", "root_path": "/Users/ldev587/Documents/QA/scripts/dbt-test", "path": "stg_customers.sql", "original_file_path": "models/stg_customers.sql", "name": "stg_customers", "resource_type": "model", "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "02b2e422e3a2b4ddf558783d76f68aeed7d456af28662f65ca075f253c4e6967"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "jaffle_shop": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "This model cleans up customer data", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/schema.yml", "build_path": "target/run/jaffle_shop/models/stg_customers.sql", "deferred": false, "compiled_sql": "select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from `dbt-tutorial`.jaffle_shop.customers", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from `dbt-tutorial`.jaffle_shop.customers"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.2088289260864258, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-22T14:11:01.660259Z", "completed_at": "2020-12-22T14:11:01.683816Z"}, {"name": "execute", "started_at": "2020-12-22T14:11:01.684132Z", "completed_at": "2020-12-22T14:11:02.868135Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from `dbt-tutorial`.jaffle_shop.orders", "compiled": true, "database": "cool-evening-299014", "schema": "dbt_david", "fqn": ["jaffle_shop", "stg_orders"], "unique_id": "model.jaffle_shop.stg_orders", "package_name": "jaffle_shop", "root_path": "/Users/ldev587/Documents/QA/scripts/dbt-test", "path": "stg_orders.sql", "original_file_path": "models/stg_orders.sql", "name": "stg_orders", "resource_type": "model", "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "a8b96987bb181cdbeb8975c6ee03cffbe815f0de22b9a5a043abcb4180791736"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "jaffle_shop": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "This model cleans up order data", "columns": {"order_id": {"name": "order_id", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/schema.yml", "build_path": "target/run/jaffle_shop/models/stg_orders.sql", "deferred": false, "compiled_sql": "select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from `dbt-tutorial`.jaffle_shop.orders", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from `dbt-tutorial`.jaffle_shop.orders"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.9745988845825195, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-22T14:11:02.873223Z", "completed_at": "2020-12-22T14:11:02.884681Z"}, {"name": "execute", "started_at": "2020-12-22T14:11:02.885278Z", "completed_at": "2020-12-22T14:11:03.846751Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with order_payment_method_amounts as (\n    select\n        order_id,\n        {% for payment_method in [\"bank_transfer\", \"credit_card\", \"gift_card\"] %}\n        sum(case when payment_method = '{{payment_method}}' then amount end) as {{payment_method}}_amount,\n        {% endfor %}\n        sum(amount) as total_amount\n        from {{ ref('raw_payments') }}\n     group by 1\n\n),\n\nfinal as (\n\n    select * from order_payment_method_amounts\n\n)\n\nselect * from final", "compiled": true, "database": "cool-evening-299014", "schema": "dbt_david", "fqn": ["jaffle_shop", "order_payment_method_amounts"], "unique_id": "model.jaffle_shop.order_payment_method_amounts", "package_name": "jaffle_shop", "root_path": "/Users/ldev587/Documents/QA/scripts/dbt-test", "path": "order_payment_method_amounts.sql", "original_file_path": "models/order_payment_method_amounts.sql", "name": "order_payment_method_amounts", "resource_type": "model", "alias": "order_payment_method_amounts", "checksum": {"name": "sha256", "checksum": "8c99fb1f20001f9365c18293c2639192d884e25d4b1fd27fec444d57c172771d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "jaffle_shop": null}, "tags": [], "refs": [["raw_payments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["seed.jaffle_shop.raw_payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/order_payment_method_amounts.sql", "deferred": false, "compiled_sql": "with order_payment_method_amounts as (\n    select\n        order_id,\n        \n        sum(case when payment_method = 'bank_transfer' then amount end) as bank_transfer_amount,\n        \n        sum(case when payment_method = 'credit_card' then amount end) as credit_card_amount,\n        \n        sum(case when payment_method = 'gift_card' then amount end) as gift_card_amount,\n        \n        sum(amount) as total_amount\n        from `cool-evening-299014`.`dbt_david`.`raw_payments`\n     group by 1\n\n),\n\nfinal as (\n\n    select * from order_payment_method_amounts\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with order_payment_method_amounts as (\n    select\n        order_id,\n        \n        sum(case when payment_method = 'bank_transfer' then amount end) as bank_transfer_amount,\n        \n        sum(case when payment_method = 'credit_card' then amount end) as credit_card_amount,\n        \n        sum(case when payment_method = 'gift_card' then amount end) as gift_card_amount,\n        \n        sum(amount) as total_amount\n        from `cool-evening-299014`.`dbt_david`.`raw_payments`\n     group by 1\n\n),\n\nfinal as (\n\n    select * from order_payment_method_amounts\n\n)\n\nselect * from final"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.0060279369354248, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-22T14:11:03.850920Z", "completed_at": "2020-12-22T14:11:03.862234Z"}, {"name": "execute", "started_at": "2020-12-22T14:11:03.862669Z", "completed_at": "2020-12-22T14:11:04.856156Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config(\n    materialized='view'\n  )\n}}\n\nwith customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\ncustomer_orders as (\n\n    select\n        customer_id,\n\n        min(order_date) as first_order_date,\n        max(order_date) as most_recent_order_date,\n        count(order_id) as number_of_orders\n\n    from orders\n\n    group by 1\n\n),\n\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        coalesce(customer_orders.number_of_orders, 0) as number_of_orders\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n)\n\nselect * from final", "compiled": true, "database": "cool-evening-299014", "schema": "dbt_david", "fqn": ["jaffle_shop", "customers"], "unique_id": "model.jaffle_shop.customers", "package_name": "jaffle_shop", "root_path": "/Users/ldev587/Documents/QA/scripts/dbt-test", "path": "customers.sql", "original_file_path": "models/customers.sql", "name": "customers", "resource_type": "model", "alias": "customers", "checksum": {"name": "sha256", "checksum": "ca0c269c95d19176b385b3c39554fffb1e355c4751f19c8a16f31f923f10c9dd"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "jaffle_shop": null}, "tags": [], "refs": [["stg_customers"], ["stg_orders"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.jaffle_shop.stg_customers", "model.jaffle_shop.stg_orders"]}, "description": "Write a test that fails, for example, omit one of the order statuses in the accepted*values list. What does a failing test look like? Can you debug the failure?\nRun the tests for one model only. If you grouped your stg* models into a directory, try running the tests for all the models in that directory.\nUse a docs block to add a Markdown description to a model.", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_order_date": {"name": "first_order_date", "description": "NULL when a customer has not yet placed an order.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/schema.yml", "build_path": "target/run/jaffle_shop/models/customers.sql", "deferred": false, "compiled_sql": "\n\nwith customers as (\n\n    select * from `cool-evening-299014`.`dbt_david`.`stg_customers`\n\n),\n\norders as (\n\n    select * from `cool-evening-299014`.`dbt_david`.`stg_orders`\n\n),\n\ncustomer_orders as (\n\n    select\n        customer_id,\n\n        min(order_date) as first_order_date,\n        max(order_date) as most_recent_order_date,\n        count(order_id) as number_of_orders\n\n    from orders\n\n    group by 1\n\n),\n\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        coalesce(customer_orders.number_of_orders, 0) as number_of_orders\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith customers as (\n\n    select * from `cool-evening-299014`.`dbt_david`.`stg_customers`\n\n),\n\norders as (\n\n    select * from `cool-evening-299014`.`dbt_david`.`stg_orders`\n\n),\n\ncustomer_orders as (\n\n    select\n        customer_id,\n\n        min(order_date) as first_order_date,\n        max(order_date) as most_recent_order_date,\n        count(order_id) as number_of_orders\n\n    from orders\n\n    group by 1\n\n),\n\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        coalesce(customer_orders.number_of_orders, 0) as number_of_orders\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n)\n\nselect * from final"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.0663080215454102, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-12-22T14:11:04.860348Z", "completed_at": "2020-12-22T14:11:04.874449Z"}, {"name": "execute", "started_at": "2020-12-22T14:11:04.874823Z", "completed_at": "2020-12-22T14:11:05.925773Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-12-22T14:11:05.930190Z", "elapsed_time": 5.150834083557129}